
// Add applicationContext.xml to resources with the following content

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-3.2.xsd
                            http://www.springframework.org/schema/jee
                            http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-3.2.0.xsd">

    <!--
            This will automatically locate any and all property files you have
            within your classpath, provided they fall under the META-INF
            directory. The located property files are parsed and their values can
            then be used within application context files in the form of
            ${propertyKey}.
    -->
    <bean class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/postgres"/>
        <property name="expectedType" value="javax.sql.DataSource"/>
        <property name="lookupOnStartup" value="false"/>
    </bean>
    <context:property-placeholder location="classpath*:*.properties" />
</beans>



// Change MAIN as Follows 
package com.hausarbeit;


import org.apache.catalina.Context;
import org.apache.tomcat.util.descriptor.web.ContextResource;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ImportResource;

import javax.sql.DataSource;

@SpringBootApplication
@ImportResource("classpath:applicationContext.xml")
public class RestServiceApplication {

    public static void main(String[] args) throws Exception {
        new SpringApplicationBuilder()
                .sources(RestServiceApplication.class)
                .run(args);
    }
    @Bean
    public TomcatServletWebServerFactory tomcatFactory() {
        return new TomcatServletWebServerFactory() {
            @Override
            protected TomcatWebServer getTomcatWebServer(org.apache.catalina.startup.Tomcat tomcat) {
                tomcat.enableNaming();
                return super.getTomcatWebServer(tomcat);
            }
            // register the DataSource in JNDI by overriding the postProcessContext
            @Override
            protected void postProcessContext(Context context) {
                ContextResource resource = new ContextResource();
                resource.setName("jdbc/postgres");
                resource.setType(DataSource.class.getName());
                resource.setProperty("driverClassName", "org.postgresql.Driver");
                resource.setProperty("url", "jdbc:postgresql://localhost:5432/test1");
                resource.setProperty("username", "postgres");
                resource.setProperty("password", System.getenv("DB_PW"));
                context.getNamingResources()
                        .addResource(resource);
            }
        };
    }
}

// Change the Datasource declaration to 

InitialContext initialContext = new InitialContext();
            DataSource datasource = (DataSource) initialContext.lookup("java:comp/env/jdbc/postgres"); //use JNDI
            con = datasource.getConnection();